export declare type TreeNode = {
    /** id of the created object */
    id: string;
    /**
     * contains information such as component key, category for an element
     */
    meta: any;
    /**
     * contains state of the element
     */
    state: {
        [key: string]: any;
    } & {
        parent: {
            id: string;
            index: number;
        };
    };
};
export declare type TreeLink = {
    /** id of the node in the parent tree */
    refId: string;
    /** id of the node in the child tree */
    childId: string;
};
export declare type Tree = {
    nodes: {
        [id: string]: TreeNode;
    };
    links: {
        [refId: string]: TreeLink;
    };
    create: (event: Omit<CreateEvent, "type">, meta: EventMetaData) => void;
    patch: (event: Omit<PatchEvent, "type">, meta: EventMetaData) => void;
    del: (event: Omit<DeleteEvent, "type">, meta: EventMetaData) => void;
    link: (event: Omit<LinkEvent, "type">, meta: EventMetaData) => void;
    unlink: (event: Omit<UnlinkEvent, "type">, meta: EventMetaData) => void;
};
export declare type EventMetaData = {
    agent: "browser" | "server-sent";
    custom?: any;
};
export declare type Forest = {
    tree: (name: string) => Tree | undefined;
    create: (event: CreateEvent, meta: EventMetaData) => void;
    patch: (event: PatchEvent, meta: EventMetaData) => void;
    del: (event: DeleteEvent, meta: EventMetaData) => void;
    link: (event: LinkEvent, meta: EventMetaData) => void;
    unlink: (event: UnlinkEvent, meta: EventMetaData) => void;
    handleEvents: (data: {
        name: string;
        events: AnyEvent[];
        meta: EventMetaData;
    }) => void;
    subscribeForest: (cb: ForestUpdateSubscriber) => ForestUpdateUnsubscriber;
};
export declare type EventDto = {
    type: string;
};
export declare type CreateEvent = TreeNode & EventDto;
export declare type PatchEvent = {
    id: string;
    /**
     * contains slice that can be applied to the state of an element
     */
    slice: any;
} & EventDto;
export declare type DeleteEvent = {
    id: string;
} & EventDto;
export declare type LinkEvent = TreeLink & EventDto;
export declare type UnlinkEvent = LinkEvent;
export declare type HardPatchEvent = {
    id: string;
    state: any;
    selector?: string[];
} & EventDto;
export declare type AnyEvent = CreateEvent | PatchEvent | DeleteEvent | LinkEvent | UnlinkEvent | HardPatchEvent;
export declare type TreeDefReturnType = {
    validateCreate: (event: CreateEvent) => boolean;
    validatePatch: (event: PatchEvent) => boolean;
    onCreate: (event: CreateEvent) => void;
};
export declare type TreeDef = {
    id: string;
    modulePath: string;
    defFn: () => TreeDefReturnType;
};
export declare type ForestDef = {
    id: string;
    pkg: string;
    trees: TreeDef[];
};
export declare type Folder = {
    id: string;
    name: string;
    parentId: string;
};
export declare type Page = {
    id: string;
    name: string;
    folderId: string;
};
export declare type MetaData = {
    folders: {
        [folderId: string]: Folder;
    };
    pages: {
        [pageId: string]: Folder["id"];
    };
};
export declare type PageDetails = {
    name: string;
    route: string;
};
export declare type EventManager = {
    meta: () => MetaData;
    updateMeta: (data: MetaData) => void;
    pages: () => {
        [id: Page["id"]]: PageDetails;
    };
    createPage: (id: Page["id"], name: string, route: string) => void;
    renamePage: (id: Page["id"], name: string) => void;
    changeRoute: (id: Page["id"], route: string) => void;
    deletePage: (id: Page["id"]) => void;
    storeEvent: (pageId: Page["id"], event: AnyEvent) => void;
    fetchEvents: (pageId: Page["id"]) => AnyEvent[];
    writeBackCompressedEvents: (pageId: Page["id"], events: AnyEvent[]) => void;
    incrementAlias: (prefix: string) => number;
};
export declare type ForestManager = {
    getEventManager: (name: string) => EventManager;
};
export declare type ForestsConfig = {
    [forestPkg: string]: Pick<TreeDef, "modulePath">[];
};
export declare type WireUpdate = {
    type: "wire";
    id: string;
    parentId: string;
    treeId: string;
};
export declare type DewireUpdate = {
    type: "dewire";
    childId: string;
    parentId: string;
    treeId: string;
    deletedNode: TreeNode;
    topNode: TreeNode;
    deletedNodes: TreeNode[];
};
export declare type RewireUpdate = {
    type: "rewire";
    childId: string;
    oldParentId: string;
    newParentId: string;
    newIndex: number;
    oldIndex: number;
    treeId: string;
};
export declare type ChangeUpdate = {
    type: "change";
    id: string;
    treeId: string;
    oldState: any;
};
export declare type LinkUpdate = {
    type: "link";
    refId: string;
    childId: string;
    treeId: string;
    rootTreeId: string;
};
export declare type UnlinkUpdate = {
    type: "unlink";
    refId: string;
    childId: string;
    treeId: string;
    rootTreeId: string;
};
export declare type ForestUpdate = WireUpdate | DewireUpdate | RewireUpdate | ChangeUpdate | LinkUpdate | UnlinkUpdate;
export declare type ForestUpdateSubscriber = (update: ForestUpdate, more: {
    name: string;
    meta: EventMetaData;
}) => void;
export declare type ForestUpdateUnsubscriber = () => void;
//# sourceMappingURL=types.d.ts.map