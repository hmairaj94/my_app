"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTree = void 0;
function createTree(treeDef, forest) {
    var eventSuffix = treeDef.id;
    var tree = {
        nodes: {},
        links: {},
        create: function (event, meta) {
            var createEvent = __assign(__assign({}, event), { type: "CREATE$$".concat(eventSuffix) });
            forest.create(createEvent, meta);
        },
        patch: function (event, meta) {
            var patchEvent = __assign(__assign({}, event), { type: "PATCH$$".concat(eventSuffix) });
            forest.patch(patchEvent, meta);
        },
        del: function (event, meta) {
            var delEvent = __assign(__assign({}, event), { type: "DELETE$$".concat(eventSuffix) });
            forest.del(delEvent, meta);
        },
        link: function (event, meta) {
            var linkEvent = __assign(__assign({}, event), { type: "LINK$$".concat(eventSuffix) });
            forest.link(linkEvent, meta);
        },
        unlink: function (event, meta) {
            var unlinkEvent = __assign(__assign({}, event), { type: "UNLINK$$".concat(eventSuffix) });
            forest.link(unlinkEvent, meta);
        },
    };
    return tree;
}
exports.createTree = createTree;
//# sourceMappingURL=tree.js.map