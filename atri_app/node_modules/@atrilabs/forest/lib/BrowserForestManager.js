"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createBrowserForestManager = void 0;
// manages multiple forests in a user session
var forest_1 = require("./forest");
function createBrowserForestManager(defs) {
    var forestMap = {};
    var _currentForest;
    /**
     *
     * If the currentForest changes, all the listeners will automatically start
     * listening updates from the newly set current forest.
     *
     * To actually achieve this, this module implements it's own observer pattern.
     * On any event from currently set forest, the variable _currentForestSubscribers is looped through.
     * On setting current forest, the variable _forestUnsubscriber is updated.
     */
    var _currentForestSubscribers = [];
    var _forestUnsubscriber;
    function getForest(forestPkgId, forestId) {
        if (forestMap[forestPkgId] === undefined) {
            forestMap[forestPkgId] = {};
        }
        if (forestMap[forestPkgId][forestId] === undefined) {
            try {
                var def = defs.find(function (def) { return def.pkg === forestPkgId; });
                if (def) {
                    var forest = (0, forest_1.createForest)(def);
                    forestMap[forestPkgId][forestId] = forest;
                }
                else {
                    console.error("Forest package with id ".concat(forestPkgId, " not found"));
                    return;
                }
            }
            catch (err) {
                console.error("Failed to load forest with id ".concat(forestId));
                return;
            }
        }
        return forestMap[forestPkgId][forestId];
    }
    function setCurrentForest(forestPkgId, forestId) {
        var forest = getForest(forestPkgId, forestId);
        if (forest) {
            _currentForest = __assign(__assign({}, forest), { forestPkgId: forestPkgId, forestId: forestId });
        }
        if (_forestUnsubscriber)
            _forestUnsubscriber();
        // call all current forest subscribers & update forest unsubscriber
        _forestUnsubscriber = _currentForest.subscribeForest(function (update, options) {
            _currentForestSubscribers.forEach(function (cb) { return cb(update, options); });
        });
        onResetListeners.forEach(function (cb) {
            cb();
        });
        return forest;
    }
    // create current forest
    var onResetListeners = [];
    var createUnsubscriber = function (arr, cb) {
        return function () {
            var index = arr.findIndex(function (curr) { return curr === cb; });
            if (index >= 0) {
                arr.splice(index, 1);
            }
        };
    };
    // implement the same api as forest
    var currentForest = {
        get forestPkgId() {
            return _currentForest.forestPkgId;
        },
        get forestId() {
            return _currentForest.forestId;
        },
        tree: function (treeId) {
            return _currentForest.tree(treeId);
        },
        create: function (event, meta) {
            return _currentForest.create(event, meta);
        },
        patch: function (event, meta) {
            return _currentForest.patch(event, meta);
        },
        del: function (event, meta) {
            return _currentForest.del(event, meta);
        },
        link: function (event, meta) {
            return _currentForest.link(event, meta);
        },
        unlink: function (event, meta) {
            return _currentForest.unlink(event, meta);
        },
        handleEvents: function (data) {
            return _currentForest.handleEvents(data);
        },
        on: function (event, cb) {
            if (event === "reset") {
                onResetListeners.push(cb);
                return createUnsubscriber(onResetListeners, cb);
            }
            throw Error("CurrentForest doesn't support event of type ".concat(event));
        },
        subscribeForest: function (cb) {
            _currentForestSubscribers.push(cb);
            return function () {
                var index = _currentForestSubscribers.findIndex(function (curr) { return curr === cb; });
                if (index >= 0) {
                    _currentForestSubscribers.splice(index, 1);
                }
            };
        },
    };
    return { getForest: getForest, setCurrentForest: setCurrentForest, currentForest: currentForest };
}
exports.createBrowserForestManager = createBrowserForestManager;
//# sourceMappingURL=BrowserForestManager.js.map