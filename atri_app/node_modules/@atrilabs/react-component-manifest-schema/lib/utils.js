export function horizontalClose(loc, coord) {
    return loc.pageX - coord.leftWM < coord.rightWM - loc.pageX
        ? "left"
        : "right";
}
export function verticalClose(loc, coord) {
    return loc.pageY - coord.topWM < coord.bottomWM - loc.pageY
        ? "top"
        : "bottom";
}
// =================== flex row ===========================
export function bottomWMSort(coords) {
    coords.sort(function (a, b) {
        return a.bottomWM - b.bottomWM;
    });
    return coords;
}
export function detectRows(sortedCords) {
    var currMaxY = sortedCords[0].bottomWM;
    var rows = [];
    for (var i = 1; i < sortedCords.length; i++) {
        var coord = sortedCords[i];
        if (coord.topWM >= currMaxY) {
            // row change has happened
            var lastIndex = i - 1;
            var maxY = currMaxY;
            rows.push({ lastIndex: lastIndex, maxY: maxY });
        }
        if (coord.bottomWM > currMaxY) {
            currMaxY = coord.bottomWM;
        }
    }
    rows.push({ lastIndex: sortedCords.length - 1, maxY: currMaxY });
    return rows;
}
export function leftWMSort(coords) {
    coords.sort(function (a, b) {
        return a.leftWM - b.leftWM;
    });
    return coords;
}
export function isInsideRowBox(loc, coord) {
    return loc.pageX >= coord.leftWM && loc.pageX <= coord.rightWM;
}
export function findInRow(loc, coords) {
    var foundIndex = coords.length;
    for (var i = 0; i < coords.length; i++) {
        var coord = coords[i];
        if (isInsideRowBox(loc, coord)) {
            var side = horizontalClose(loc, coord);
            if (side === "left") {
                foundIndex = i;
            }
            else {
                foundIndex = i + 1;
            }
            break;
        }
        if (coord.leftWM > loc.pageX) {
            foundIndex = i;
            break;
        }
    }
    return foundIndex;
}
export function flexRowSort(loc, coords) {
    bottomWMSort(coords);
    var rows = detectRows(coords);
    var rowWiseCoords = rows.map(function (row, index) {
        var newCoords = [];
        if (index === 0)
            newCoords = coords.slice(0, row.lastIndex + 1);
        else
            newCoords = coords.slice(rows[index - 1].lastIndex + 1, row.lastIndex + 1);
        leftWMSort(newCoords);
        return newCoords;
    });
    var rowIndex = rows.findIndex(function (row) { return row.maxY >= loc.pageY; });
    if (rowIndex < 0) {
        console.error("unexpected less than 0");
        return;
    }
    if (rowIndex === 0) {
        return findInRow(loc, rowWiseCoords[rowIndex]);
    }
    return (rows[rowIndex - 1].lastIndex + 1 + findInRow(loc, rowWiseCoords[rowIndex]));
}
// ================== flex col ==================================
export function rightWMSort(coords) {
    coords.sort(function (a, b) {
        return a.rightWM - b.rightWM;
    });
    return coords;
}
export function detectCols(sortedCords) {
    var currMaxX = sortedCords[0].rightWM;
    var cols = [];
    for (var i = 1; i < sortedCords.length; i++) {
        var coord = sortedCords[i];
        if (coord.leftWM >= currMaxX) {
            // row change has happened
            var lastIndex = i - 1;
            var maxX = currMaxX;
            cols.push({ lastIndex: lastIndex, maxX: maxX });
        }
        if (coord.rightWM > currMaxX) {
            currMaxX = coord.rightWM;
        }
    }
    cols.push({ lastIndex: sortedCords.length - 1, maxX: currMaxX });
    return cols;
}
export function topWMSort(coords) {
    coords.sort(function (a, b) {
        return a.topWM - b.topWM;
    });
    return coords;
}
export function isInsideColBox(loc, coord) {
    return loc.pageY >= coord.topWM && loc.pageY <= coord.bottomWM;
}
export function findInCol(loc, coords) {
    var foundIndex = coords.length;
    for (var i = 0; i < coords.length; i++) {
        var coord = coords[i];
        if (isInsideColBox(loc, coord)) {
            var side = verticalClose(loc, coord);
            if (side === "top") {
                foundIndex = i;
            }
            else {
                foundIndex = i + 1;
            }
            break;
        }
        if (coord.topWM > loc.pageY) {
            foundIndex = i;
            break;
        }
    }
    return foundIndex;
}
export function flexColSort(loc, coords) {
    rightWMSort(coords);
    var cols = detectCols(coords);
    var colWiseCoords = cols.map(function (col, index) {
        var newCoords = [];
        if (index === 0)
            newCoords = coords.slice(0, col.lastIndex + 1);
        else
            newCoords = coords.slice(cols[index - 1].lastIndex + 1, col.lastIndex + 1);
        topWMSort(newCoords);
        return newCoords;
    });
    var colIndex = cols.findIndex(function (col) { return col.maxX >= loc.pageX; });
    if (colIndex < 0) {
        console.error("unexpected less than 0");
        return;
    }
    if (colIndex === 0) {
        return findInCol(loc, colWiseCoords[colIndex]);
    }
    return (cols[colIndex - 1].lastIndex + 1 + findInCol(loc, colWiseCoords[colIndex]));
}
// ================ flex row reverse ====================
export function rightWMReverseSort(coords) {
    coords.sort(function (a, b) {
        return b.rightWM - a.rightWM;
    });
    return coords;
}
export function findInRowRevere(loc, coords) {
    var foundIndex = coords.length;
    for (var i = 0; i < coords.length; i++) {
        var coord = coords[i];
        if (isInsideRowBox(loc, coord)) {
            var side = horizontalClose(loc, coord);
            if (side === "right") {
                foundIndex = i;
            }
            else {
                foundIndex = i + 1;
            }
            break;
        }
        if (coord.rightWM < loc.pageX) {
            foundIndex = i;
            break;
        }
    }
    return foundIndex;
}
export function flexRowReverseSort(loc, coords) {
    bottomWMSort(coords);
    var rows = detectRows(coords);
    var rowWiseCoords = rows.map(function (row, index) {
        var newCoords = [];
        if (index === 0)
            newCoords = coords.slice(0, row.lastIndex + 1);
        else
            newCoords = coords.slice(rows[index - 1].lastIndex + 1, row.lastIndex + 1);
        rightWMReverseSort(newCoords);
        return newCoords;
    });
    var rowIndex = rows.findIndex(function (row) { return row.maxY >= loc.pageY; });
    if (rowIndex < 0) {
        console.error("unexpected less than 0");
        return;
    }
    if (rowIndex === 0) {
        return findInRowRevere(loc, rowWiseCoords[rowIndex]);
    }
    return (rows[rowIndex - 1].lastIndex +
        1 +
        findInRowRevere(loc, rowWiseCoords[rowIndex]));
}
// ==================== flex col reverse =========================
export function bottomWMReverseSort(coords) {
    coords.sort(function (a, b) {
        return b.bottomWM - a.bottomWM;
    });
    return coords;
}
export function findInColReverse(loc, coords) {
    var foundIndex = coords.length;
    for (var i = 0; i < coords.length; i++) {
        var coord = coords[i];
        if (isInsideColBox(loc, coord)) {
            var side = verticalClose(loc, coord);
            if (side === "bottom") {
                foundIndex = i;
            }
            else {
                foundIndex = i + 1;
            }
            break;
        }
        if (coord.bottomWM < loc.pageY) {
            foundIndex = i;
            break;
        }
    }
    return foundIndex;
}
export function flexColReverseSort(loc, coords) {
    rightWMSort(coords);
    var cols = detectCols(coords);
    var colWiseCoords = cols.map(function (col, index) {
        var newCoords = [];
        if (index === 0)
            newCoords = coords.slice(0, col.lastIndex + 1);
        else
            newCoords = coords.slice(cols[index - 1].lastIndex + 1, col.lastIndex + 1);
        bottomWMReverseSort(newCoords);
        return newCoords;
    });
    var colIndex = cols.findIndex(function (col) { return col.maxX >= loc.pageX; });
    if (colIndex < 0) {
        console.error("unexpected less than 0");
        return;
    }
    if (colIndex === 0) {
        return findInColReverse(loc, colWiseCoords[colIndex]);
    }
    return (cols[colIndex - 1].lastIndex +
        1 +
        findInColReverse(loc, colWiseCoords[colIndex]));
}
//# sourceMappingURL=utils.js.map