import type { FC } from "react";
export declare type ComponentCoordsWM = {
    top: number;
    left: number;
    width: number;
    height: number;
    topWM: number;
    leftWM: number;
    rightWM: number;
    bottomWM: number;
};
export declare type PropsSelector = string[];
export declare type ControlledCallback = {
    type: "controlled";
    selector: PropsSelector;
};
export declare type FileInputCallback = {
    type: "file_input";
    selector: PropsSelector;
};
export declare type DoNothingCallback = {
    type: "do_nothing";
};
/**
 * Callback defines the behavior of a callback with the App's state store.
 */
export declare type Callback = ControlledCallback | FileInputCallback | DoNothingCallback;
export declare type SendFileCallbackHandler = ({
    self: boolean;
} | {
    alias: string;
}) & {
    props: string[];
};
export declare type SendEventCallbackHandler = boolean;
export declare type NavigationCallbackHandler = {
    /**
     * Internal navigation if navigation locally in the browser in Single Page Applications.
     * External vavaigation if navigating to an url outside the SPA.
     * The url field for internal should be /path/to/other/page.
     * The url field for external should be of format protocol://domain[?..][#/../]
     */
    type: "internal" | "external";
    url: string;
    target?: "_blank" | "_self";
};
/**
 * CallbackHandler defines behavior with the backend whenever a callback is fired.
 * CallbackHandlers must be serializable because it is store in CallbackHandlerTree.
 */
export declare type CallbackHandler = ({
    sendFile: SendFileCallbackHandler;
} | {
    sendEventData: SendEventCallbackHandler;
} | {
    navigate: NavigationCallbackHandler;
})[];
export declare type AcceptsChildFunction = (info: {
    coords: ComponentCoordsWM;
    childCoordinates: ComponentCoordsWM[];
    loc: {
        pageX: number;
        pageY: number;
    };
    props: any;
}) => number;
export declare type IoProp = {
    mode: "upload" | "download" | "duplex";
    type: "files" | "stream";
};
export declare type IoType<T extends IoProp> = T["type"] extends "files" ? FileList : T["type"] extends "stream" ? Blob : never;
export declare type ReactComponentManifestSchema = {
    meta: {
        key: string;
        category: string;
    };
    render: {
        comp: FC<any>;
    };
    dev: {
        comp?: FC<any>;
        decorators: FC<any>[];
        attachProps: {
            [key: string]: {
                treeId: string;
                initialValue: any;
                treeOptions: any;
                canvasOptions: {
                    groupByBreakpoint: boolean;
                };
            };
        };
        attachCallbacks: {
            [key: string]: Callback[];
        };
        acceptsChild?: AcceptsChildFunction;
        defaultCallbackHandlers: {
            [callbackName: string]: CallbackHandler;
        };
        ioProps?: {
            [propName: string]: {
                [key: string]: IoProp;
            };
        };
    };
};
//# sourceMappingURL=types.d.ts.map