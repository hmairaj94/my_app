var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx } from "react/jsx-runtime";
import React from "react";
import { gray300, gray800 } from "../../consts/colors";
import { smallText } from "../../consts/typography";
import styles from "../../stylesheets/form-field.module.css";
// Controlled Component
export var Dropdown = React.memo(function (props) {
    return (_jsx("select", __assign({ style: __assign(__assign({ width: "10rem", height: "1.4rem", background: "".concat(gray800) }, smallText), { color: gray300, borderRadius: "4px", padding: "0.2rem" }), className: styles["formfield"], onChange: function (e) {
            if (props.onSelect)
                props.onSelect(props.options[e.target.selectedIndex], e.target.selectedIndex);
        }, value: props.options[props.selectedIndex], disabled: props.disabled }, { children: props.options.map(function (opt, index) {
            return (_jsx("option", __assign({ value: opt }, { children: opt }), opt + index));
        }) })));
});
//# sourceMappingURL=Dropdown.js.map