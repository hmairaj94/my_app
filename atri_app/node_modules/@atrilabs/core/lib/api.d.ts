import { AnyEvent, EventMetaData } from "@atrilabs/forest";
declare const _default: {
    postNewEvents: (forestPkgId: string, pageId: string, data: {
        name: string;
        events: AnyEvent[];
        meta: EventMetaData;
    }) => void;
    getSocket(): import("socket.io-client").Socket<import("@socket.io/component-emitter").DefaultEventsMap, import("@socket.io/component-emitter").DefaultEventsMap>;
    getIPCSocket(): import("socket.io-client").Socket<import("@socket.io/component-emitter").DefaultEventsMap, import("@socket.io/component-emitter").DefaultEventsMap>;
    getMeta(forestPkgId: string, onData: (meta: any) => void): void;
    getPages(forestPkgId: string, onData: (pages: {
        [pageId: string]: import("@atrilabs/forest").PageDetails;
    }) => void): void;
    createFolder(forestPkgId: string, folder: import("@atrilabs/forest").Folder, callback: (success: boolean) => void): void;
    updateFolder(forestPkgId: string, id: string, update: Partial<Omit<import("@atrilabs/forest").Folder, "id">>, callback: (success: boolean) => void): void;
    createPage(forestPkgId: string, page: import("@atrilabs/forest").Page, callback: (success: boolean) => void): void;
    updatePage(forestPkgId: string, id: string, update: Partial<Omit<import("@atrilabs/forest").Page, "id">>, callback: (success: boolean) => void): void;
    deletePage(forestPkgId: string, id: string, callback: (success: boolean) => void): void;
    deleteFolder(forestPkgId: string, id: string, callback: (success: boolean) => void): void;
    fetchEvents(forestPkgId: string, pageId: string): Promise<AnyEvent[]>;
    postNewEvent(forestPkgId: string, pageId: string, event: AnyEvent, callback: (success: boolean) => void): void;
    getNewAlias(forestPkgId: string, prefix: string, callback: (alias: string) => void): void;
    subscribeEvents(cb: import("./types").EventSubscriber): () => void;
    subscribeExternalEvents(cb: import("./types").EventSubscriber): () => void;
    subscribeOwnEvents(cb: import("./types").EventSubscriber): () => void;
    uploadAssets(files: {
        name: string;
        data: ArrayBuffer;
        size: number;
        mime: string;
    }[], callback: (success: boolean, urls: string[]) => void): void;
    getAssetsInfo: (callback: (assets: {
        [name: string]: {
            url: string;
            mime: string;
        };
    }) => void) => void;
    getTemplateList: (callback: (details: import("./types").TemplateDetail[]) => void) => void;
    createTemplate: (dir: string, name: string, events: AnyEvent[], callback: (success: boolean) => void) => void;
    overwriteTemplate: (dir: string, name: string, events: AnyEvent[], callback: (success: boolean) => void) => void;
    deleteTemplate: (dir: string, name: string, callback: (success: boolean) => void) => void;
    getTemplateEvents: (dir: string, name: string, callback: (events: AnyEvent[]) => void) => void;
    importResource: (importStatement: {
        str: string;
    }, callback: (success: boolean) => void) => void;
    getResources: (callback: (resources: import("./types").ImportedResource[]) => void) => void;
    subscribeResourceUpdates: (callback: (resource: import("./types").ImportedResource) => void) => void;
    getAttachedServicesStatus: (callback: (status: {
        [clientName: string]: boolean;
    }) => void) => void;
    subscribeServiceStatus: (callback: (status: {
        [clientName: string]: boolean;
    }) => void) => () => void;
};
export default _default;
//# sourceMappingURL=api.d.ts.map