import React, { ReactNode } from "react";
import { ContainerItem, MenuItem, TabItem } from "./types";
declare type SubscribeEvent = "registered" | "unregistered";
/**
 *
 * @param name Pass a local value. The local value must be a string literal as it's replaced with global value during build.
 * @returns
 */
export declare function menu(name: string): {
    register: (item: MenuItem) => void;
    listen: (cb: (payload: {
        nodes: MenuItem["nodes"];
        event: SubscribeEvent;
    }) => void) => {
        unsubscribe: () => void;
        items: MenuItem[];
    };
    items: () => MenuItem[];
    unregister: (nodes: MenuItem["nodes"]) => void;
} | undefined;
/**
 *
 * @param name Pass a local value. The local value must be a string literal as it's replaced with global value during build.
 * @returns
 */
export declare function container(name: string): {
    register: (item: ContainerItem) => void;
    listen: (cb: (payload: {
        node: ReactNode | ReactNode[];
        event: SubscribeEvent;
    }) => void) => {
        unsubscribe: () => void;
        items: ContainerItem[];
    };
    items: () => ContainerItem[];
    unregister: (node: ContainerItem["node"]) => void;
    pop: () => void;
} | undefined;
/**
 *
 * @param name Pass a local value. The local value must be a string literal as it's replaced with global value during build.
 * @returns
 */
export declare function tab(name: string): {
    register: (item: TabItem) => void;
    listen: (cb: (payload: {
        item: TabItem;
        event: SubscribeEvent;
    }) => void) => {
        unsubscribe: () => void;
        items: TabItem[];
    };
    items: () => TabItem[];
    unregister: (item: TabItem) => void;
} | undefined;
export declare type ContainerProps = {
    children: ReactNode;
    name: string;
    onClose: () => void;
};
export declare const Container: React.FC<ContainerProps>;
export declare type MenuProps = {
    children: ReactNode | ReactNode[];
    name: string;
    order: number;
};
export declare const Menu: React.FC<MenuProps>;
export declare type TabProps = {
    name: string;
} & TabItem;
export declare const Tab: React.FC<TabProps>;
export declare function attachRef(name: string, ref: React.RefObject<any>): void;
/**
 *
 * detachRef deletes a ref from registry only if the provided ref matches the existing ref.
 * If it doesn't matches, then it does nothing.
 */
export declare function detachRef(name: string, ref: React.RefObject<any>): void;
export declare function getRef(name: string): React.RefObject<any>;
export {};
//# sourceMappingURL=layerSockets.d.ts.map