import React, { useEffect, useState } from "react";
import ReactDOM from "react-dom";
import ReactDOMServer from "react-dom/server";
import { load } from "cheerio";
export var GlobalContext = React.createContext({
    window: window,
    portals: undefined,
});
export function isRunningInBrowser() {
    return window !== undefined;
}
/**
 * This throws an error when used in the generated app
 * @returns
 */
export function isRunningInEditor() {
    var _a;
    try {
        return (_a = process.env["ATRI_TOOL_INSIDE_EDITOR"] === "true") !== null && _a !== void 0 ? _a : false;
    }
    catch (err) {
        return false;
    }
}
/**
 * Always render component immidiately if inside editor otherwise render after useEffect
 * @param node
 * @param window
 * @param selector
 * @param portals
 * @returns
 */
export function createPortal(node, window, selector, portals) {
    if (window === undefined) {
        if (Array.isArray(portals))
            portals.push({ node: node, selector: selector });
        return null;
    }
    if (window.document.querySelector(selector) === null) {
        console.log("Cannot find selector ".concat(selector));
        return null;
    }
    var _a = useState(false), renderPortals = _a[0], setRenderPortals = _a[1];
    useEffect(function () {
        setRenderPortals(true);
    }, []);
    return isRunningInEditor()
        ? ReactDOM.createPortal(node, window.document.querySelector(selector))
        : renderPortals
            ? ReactDOM.createPortal(node, window.document.querySelector(selector))
            : null;
}
export function addPortalsToHtml(html, portals) {
    var root = load(html);
    portals.forEach(function (_a) {
        var node = _a.node, selector = _a.selector;
        root(selector).append(ReactDOMServer.renderToString(node));
    });
    return root.html();
}
//# sourceMappingURL=reactUtilities.js.map