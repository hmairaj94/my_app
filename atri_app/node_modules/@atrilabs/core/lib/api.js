var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { BrowserForestManager } from "./browserForestManager";
/**
 * createAPI is responsible to keep BrowserForestManager & backend in sync.
 * This module will be part of frontend bundle.
 * @param client
 */
function createAPI(client) {
    function postNewEvents(forestPkgId, pageId, data) {
        var forest = BrowserForestManager.getForest(forestPkgId, pageId);
        if (forest) {
            forest.handleEvents(data);
            var events = data.events;
            events.forEach(function (event) {
                client.postNewEvent(forestPkgId, pageId, event, function (success) {
                    if (!success) {
                        console.log("Failed to send event to backend");
                    }
                });
            });
        }
    }
    return __assign(__assign({}, client), { postNewEvents: postNewEvents });
}
export default createAPI(client);
//# sourceMappingURL=api.js.map