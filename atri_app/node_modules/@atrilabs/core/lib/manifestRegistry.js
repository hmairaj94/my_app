var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
// The object will be filled during build time automatically
// schema will be imported and mapped
// components will be left as empty array to be filled during runtime
var manifestRegistry = {};
var manifestRegistrySubscribers = [];
function subscribe(cb) {
    manifestRegistrySubscribers.push(cb);
    return function () {
        var index = manifestRegistrySubscribers.findIndex(function (curr) {
            return curr === cb;
        });
        if (index >= 0) {
            manifestRegistrySubscribers.splice(index, 1);
        }
    };
}
function readManifestRegistry() {
    var manifestIds = Object.keys(manifestRegistry);
    var copy = __assign({}, manifestRegistry);
    manifestIds.forEach(function (id) {
        copy[id] = {
            schema: __assign({}, manifestRegistry[id].schema),
            components: __spreadArray([], manifestRegistry[id].components, true),
        };
    });
    return copy;
}
function writeComponents(manifestId, components) {
    manifestRegistry[manifestId].components = components;
    manifestRegistrySubscribers.forEach(function (cb) { return cb(); });
}
export var manifestRegistryController = {
    readManifestRegistry: readManifestRegistry,
    writeComponents: writeComponents,
    subscribe: subscribe,
};
//# sourceMappingURL=manifestRegistry.js.map