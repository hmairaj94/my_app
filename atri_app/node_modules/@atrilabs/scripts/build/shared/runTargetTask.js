"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runTargetTask = void 0;
var types_1 = require("util/types");
function runTargetTask(toolConfig, target, task) {
    switch (task) {
        case "generate":
            return Promise.resolve().then(function () { return __importStar(require(target.tasksHandler.modulePath)); }).then(function (mod) {
                if (!mod.scripts && typeof mod.scripts.generateApp !== "function") {
                    throw Error("The target ".concat(target.targetName, " tasksHanler.modulePath doesn't export scripts correctly."));
                }
                var result = mod.scripts.generateApp(toolConfig, target.options);
                if (!(0, types_1.isPromise)(result)) {
                    throw Error("The target ".concat(target.targetName, " generate module default function doesn't return a promise"));
                }
                return result;
            });
        case "build":
            return Promise.resolve().then(function () { return __importStar(require(target.tasksHandler.modulePath)); }).then(function (mod) {
                if (!mod.scripts && typeof mod.scripts.buildReactApp !== "function") {
                    throw Error("The target ".concat(target.targetName, " tasksHanler.modulePath doesn't export scripts correctly."));
                }
                var result = mod.scripts.buildReactApp(toolConfig, target.options);
                if (!(0, types_1.isPromise)(result)) {
                    throw Error("The target ".concat(target.targetName, " build module default function doesn't return a promise"));
                }
                return result;
            });
        case "deploy":
            return Promise.resolve().then(function () { return __importStar(require(target.tasksHandler.modulePath)); }).then(function (mod) {
                if (!mod.scripts && typeof mod.scripts.deployApp !== "function") {
                    throw Error("The target ".concat(target.targetName, " tasksHanler.modulePath doesn't export scripts correctly."));
                }
                var result = mod.scripts.deployApp(toolConfig, target.options);
                if (!(0, types_1.isPromise)(result)) {
                    throw Error("The target ".concat(target.targetName, " deploy module default function doesn't return a promise"));
                }
                return result;
            });
        default:
            throw Error("Unknown task type ".concat(task));
    }
}
exports.runTargetTask = runTargetTask;
//# sourceMappingURL=runTargetTask.js.map