"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var path_1 = __importDefault(require("path"));
var utils_1 = require("./utils");
/**
 * emitBabelLoader accounts for changes in layer.config.js and tool.config.js file.
 * It generates name maps etc. on every call.
 */
function emitBabelLoader(layerEntries, runtimeEntries, manifestSchemaEntries, forestsConfig, corePkgInfo, env, clients) {
    var isEnvDevelopment = env === "development";
    var getLayerList = function () {
        var sortedLayers = (0, utils_1.sortLayerEntriesInImportOrder)(layerEntries);
        return sortedLayers.map(function (layer) {
            return { path: layer.layerEntry };
        });
    };
    // read all name maps at once to reduce computation
    var nameMaps = {};
    layerEntries.forEach(function (layer) {
        nameMaps[layer.layerPath] = (0, utils_1.getNameMapForPackage)(layer);
    });
    runtimeEntries.forEach(function (rt) {
        nameMaps[rt.runtimePath] = (0, utils_1.getNameMapForPackage)(rt);
    });
    // collect all exposed sockets from layers and runtimes
    // these exposed sockets are entered into core package's layerDetails.js file
    var getExposedSockets = function () {
        var exposedSockets = {
            menu: new Set(),
            containers: new Set(),
            tabs: new Set(),
        };
        var values = Object.values(nameMaps);
        values.forEach(function (value) {
            if (value.menu) {
                Object.values(value.menu).forEach(exposedSockets.menu.add, exposedSockets.menu);
            }
            if (value.containers) {
                Object.values(value.containers).forEach(exposedSockets.containers.add, exposedSockets.containers);
            }
            if (value.tabs) {
                Object.values(value.tabs).forEach(exposedSockets.tabs.add, exposedSockets.tabs);
            }
        });
        return {
            menu: Array.from(exposedSockets.menu),
            containers: Array.from(exposedSockets.containers),
            tabs: Array.from(exposedSockets.tabs),
        };
    };
    // we insert (import) global values like currentLayer etc.
    // to all the modules in a layer. We do this by importing the globalModulePath
    // for each layer.
    // const getImports = (
    //   filename: string
    // ): { namedImports: string[]; path: string }[] | undefined => {
    //   const layer = detectLayerForFile(filename, layerEntries);
    //   if (layer) {
    //     return [
    //       { namedImports: ["currentLayer"], path: layer.importGlobalModulePath },
    //     ];
    //   }
    //   return;
    // };
    var getNameMap = function (filename) {
        var layer = (0, utils_1.detectLayerForFile)(filename, layerEntries);
        if (layer) {
            return nameMaps[layer.layerPath];
        }
        var runtime = (0, utils_1.detectRuntimeForFile)(filename, runtimeEntries);
        if (runtime) {
            return nameMaps[runtime.runtimePath];
        }
        return;
    };
    var use = function () {
        return [
            {
                loader: require.resolve("babel-loader"),
                options: {
                    plugins: [
                        [
                            path_1.default.resolve(__dirname, "..", "babel", "add-layer-jsx-import-to-core.js"),
                            {
                                layers: getLayerList(),
                                coreEntry: corePkgInfo.entryFile,
                                runtimes: runtimeEntries.map(function (rt) { return rt.runtimeEntry; }),
                            },
                        ],
                        [
                            path_1.default.resolve(__dirname, "..", "babel", "add-meta-to-core.js"),
                            __assign(__assign({}, getExposedSockets()), { layerDetailsFile: corePkgInfo.layerDetailsFile }),
                        ],
                        // [
                        //   path.resolve(__dirname, "..", "babel", "add-layer-import.js"),
                        //   {
                        //     getImports,
                        //   },
                        // ],
                        [
                            path_1.default.resolve(__dirname, "..", "babel", "jsx-replace-local-with-global.js"),
                            {
                                getNameMap: getNameMap,
                            },
                        ],
                        [
                            path_1.default.resolve(__dirname, "..", "babel", "replace-local-with-global.js"),
                            {
                                getNameMap: getNameMap,
                            },
                        ],
                        [
                            path_1.default.resolve(__dirname, "..", "babel", "add-forest-defs.js"),
                            {
                                browserForestManagerFile: corePkgInfo.browserForestManagerFile,
                                forests: forestsConfig,
                            },
                        ],
                        [
                            path_1.default.resolve(__dirname, "..", "babel", "replace-import-with-id.js"),
                        ],
                        [
                            path_1.default.resolve(__dirname, "..", "babel", "populate-manifest-registry-in-core.js"),
                            {
                                manifestRegistryFile: corePkgInfo.manifestRegistryFile,
                                manifests: manifestSchemaEntries.map(function (entry) {
                                    return {
                                        manifestId: entry.manifestId,
                                        schemaModulePath: entry.modulePath,
                                    };
                                }),
                            },
                        ],
                        [
                            path_1.default.resolve(__dirname, "..", "babel", "add-event-client-to-core.js"),
                            {
                                apiFile: corePkgInfo.apiFile,
                                eventClient: clients.eventClient.modulePath,
                            },
                        ],
                        isEnvDevelopment && require("react-refresh/babel"),
                    ].filter(Boolean),
                    presets: [
                        "@babel/preset-typescript",
                        ["@babel/preset-react", { runtime: "automatic" }],
                    ],
                    babelrc: false,
                    configFile: false,
                },
            },
        ];
    };
    return use;
}
exports.default = emitBabelLoader;
//# sourceMappingURL=emitBabelLoader.js.map