"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.symlinkLayerConfigFile = exports.createGlobalModuleForLayer = void 0;
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
/**
 * Creates global modules for all layers. A global module for a layer has
 * information global in the scope of layer such as whether currentLayer
 * is root or child.
 */
function createGlobalModuleForLayer(layerEntry) {
    var lines = [];
    if (layerEntry.isRoot) {
        lines.push("export const currentLayer = \"root\";");
    }
    else {
        lines.push("export const currentLayer = \"child\";");
    }
    if (!fs_1.default.existsSync(path_1.default.dirname(layerEntry.globalModulePath))) {
        fs_1.default.mkdirSync(path_1.default.dirname(layerEntry.globalModulePath), {
            recursive: true,
        });
    }
    fs_1.default.writeFileSync(layerEntry.globalModulePath, lines.join("\n"));
}
exports.createGlobalModuleForLayer = createGlobalModuleForLayer;
/**
 * Symlink all layer's config file in cache directory. It is required
 * so that when a new layer is added to tool.config.js, re-compilation kicks in.
 * Watching this directory will be equivalent of watching all layer.config.js file.
 */
function symlinkLayerConfigFile(layerEntry) {
    if (!fs_1.default.existsSync(path_1.default.dirname(layerEntry.layerConfigSymlink))) {
        fs_1.default.mkdirSync(path_1.default.dirname(layerEntry.layerConfigSymlink), {
            recursive: true,
        });
    }
    fs_1.default.symlinkSync(layerEntry.layerConfigPath, layerEntry.layerConfigSymlink, "file");
}
exports.symlinkLayerConfigFile = symlinkLayerConfigFile;
//# sourceMappingURL=processLayer.js.map