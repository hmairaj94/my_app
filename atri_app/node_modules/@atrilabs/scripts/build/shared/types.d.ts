import { LayerConfig, ManifestSchemaConfig, RuntimeConfig, ToolConfig } from "@atrilabs/core";
export declare type ToolPkgInfo = {
    dir: string;
    src: string;
    configFile: string;
    nodeModule: string;
    cacheDir: string;
    publicDir: string;
    toolHtml: string;
};
export declare type LayerEntry = {
    index: number;
    layerPackageName: string;
    layerPath: string;
    layerConfigPath: string;
    layerEntry: string;
    layerSrcDir: string;
    globalModulePath: string;
    importGlobalModulePath: string;
    layerConfigSymlink: string;
    isRoot: boolean;
    exposes: LayerConfig["exposes"];
    requires: LayerConfig["requires"];
    remap: ToolConfig["layers"]["0"]["remap"];
    runtime: LayerConfig["runtime"];
};
export declare type RuntimeEntry = {
    index: number;
    runtimePackageName: string;
    runtimePath: string;
    runtimeConfigPath: string;
    runtimeEntry: string;
    runtimeSrcDir: string;
    exposes: RuntimeConfig["exposes"];
    requires: RuntimeConfig["requires"];
    remap: ToolConfig["runtimes"]["0"]["remap"];
};
export declare type CorePkgInfo = {
    dir: string;
    entryFile: string;
    indexFile: string;
    layerDetailsFile: string;
    browserForestManagerFile: string;
    manifestRegistryFile: string;
    apiFile: string;
};
export declare type ManifestSchemaPkgInfo = {
    pkg: string;
    schemaPath: string;
    srcDir: string;
    configFile: string;
    manifestId: string;
};
export declare type ManifestSchemaEntry = ManifestSchemaPkgInfo & ManifestSchemaConfig;
export declare type ManifestPkgInfo = {
    pkg: string;
    manifestPath: string;
    srcDir: string;
    configFile: string;
    packageJSON: string;
};
export declare type ToolEnv = {
    PUBLIC_URL: string;
};
export declare type ServerConfig = {
    host: string;
    port: number;
};
//# sourceMappingURL=types.d.ts.map