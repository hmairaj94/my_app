"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildManifestPackage = void 0;
var path_1 = __importDefault(require("path"));
var fs_1 = __importDefault(require("fs"));
var utils_1 = require("./utils");
function getAllPaths(manifestPkgInfo) {
    var cacheDir = (0, utils_1.getManifestPkgCacheDir)(manifestPkgInfo);
    var cacheSrcDir = path_1.default.resolve(cacheDir, "src");
    var firstBuild = path_1.default.resolve(cacheDir, "first-build");
    var finalBuild = path_1.default.resolve(cacheDir, "final-build");
    var entryPoint = path_1.default.resolve(cacheSrcDir, "index.js");
    var manifestJsPath = path_1.default.resolve(cacheSrcDir, "manifests.js");
    var shimsPath = path_1.default.resolve(cacheSrcDir, "shims.js");
    return {
        cacheDir: cacheDir,
        cacheSrcDir: cacheSrcDir,
        firstBuild: firstBuild,
        finalBuild: finalBuild,
        entryPoint: entryPoint,
        manifestJsPath: manifestJsPath,
        shimsPath: shimsPath,
    };
}
function updateBuildCache(buildCacheFile, manifestDir, pkg, freeze) {
    return __awaiter(this, void 0, void 0, function () {
        var cache, files, i, file, stat, timestamp;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // create cache file if not already exist - default value {}
                    if (!fs_1.default.existsSync(buildCacheFile)) {
                        fs_1.default.writeFileSync(buildCacheFile, "{}");
                    }
                    cache = JSON.parse(fs_1.default.readFileSync(buildCacheFile).toString());
                    files = (0, utils_1.getFiles)(manifestDir);
                    cache[pkg] = {
                        files: {},
                        freeze: freeze,
                    };
                    i = 0;
                    _a.label = 1;
                case 1:
                    if (!(i < files.length)) return [3 /*break*/, 4];
                    file = files[i];
                    return [4 /*yield*/, fs_1.default.promises.stat(file)];
                case 2:
                    stat = _a.sent();
                    timestamp = stat.mtime;
                    cache[pkg].files[path_1.default.relative(manifestDir, file)] = { timestamp: timestamp };
                    _a.label = 3;
                case 3:
                    i++;
                    return [3 /*break*/, 1];
                case 4:
                    // write back to cache file
                    fs_1.default.writeFileSync(buildCacheFile, JSON.stringify(cache, null, 2));
                    return [2 /*return*/];
            }
        });
    });
}
function checkCache(arg) {
    var _a;
    return __awaiter(this, void 0, void 0, function () {
        var cache, currentFiles, cachedFiles, hit, i, currentFile, cacheFile, currentStat;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!(fs_1.default.existsSync(arg.buildCacheFile) &&
                        // final bundle must exist
                        fs_1.default.existsSync(arg.finalBundleFile))) return [3 /*break*/, 6];
                    cache = JSON.parse(fs_1.default.readFileSync(arg.buildCacheFile).toString());
                    if (!cache[arg.pkg]) return [3 /*break*/, 6];
                    if ((_a = cache[arg.pkg]) === null || _a === void 0 ? void 0 : _a.freeze) {
                        return [2 /*return*/, true];
                    }
                    currentFiles = (0, utils_1.getFiles)(arg.manifestDir)
                        .map(function (filename) { return path_1.default.relative(arg.manifestDir, filename); })
                        .sort();
                    cachedFiles = Object.keys(cache[arg.pkg].files).sort();
                    if (!(currentFiles.length === cachedFiles.length)) return [3 /*break*/, 5];
                    hit = true;
                    i = 0;
                    _b.label = 1;
                case 1:
                    if (!(i < currentFiles.length)) return [3 /*break*/, 4];
                    currentFile = currentFiles[i];
                    cacheFile = cachedFiles[i];
                    if (currentFile != cacheFile) {
                        console.log("file order mismatch", currentFile, cacheFile);
                        hit = false;
                        return [3 /*break*/, 4];
                    }
                    return [4 /*yield*/, fs_1.default.promises.stat(path_1.default.resolve(arg.manifestDir, cacheFile))];
                case 2:
                    currentStat = _b.sent();
                    if (currentStat.mtime.getTime() !==
                        new Date(cache[arg.pkg].files[cacheFile].timestamp).getTime()) {
                        console.log("cache miss mtime mistmatch", cacheFile);
                        hit = false;
                        return [3 /*break*/, 4];
                    }
                    _b.label = 3;
                case 3:
                    i++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/, hit];
                case 5:
                    console.log("cache miss - number of files mismatch");
                    _b.label = 6;
                case 6: return [2 /*return*/, false];
            }
        });
    });
}
// Inside docker container, compiled typescript files does not get created on disk
// hence, we will do check thrice in certain intervals to validate all files got created
function validateTSOutput(compiledFiles) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (res, rej) {
                    var retryCount = 0;
                    var validateFn = function () {
                        for (var i = 0; i < compiledFiles.length; i++) {
                            var file = compiledFiles[i];
                            if (!fs_1.default.existsSync(file)) {
                                retryCount++;
                                if (retryCount <= 3) {
                                    setTimeout(validateFn, 1000);
                                    return;
                                }
                                else {
                                    rej();
                                }
                            }
                        }
                        // will reach this line of code only after successful checks
                        res();
                    };
                    validateFn();
                })];
        });
    });
}
function buildManifestPackage(manifestDirs, pkgManager, port, scriptName, freeze) {
    return __awaiter(this, void 0, void 0, function () {
        var manifestPkgBundles, i, dir, pkg, manifestPkgInfo, _a, cacheDir, cacheSrcDir, firstBuild, finalBuild, entryPoint, manifestJsPath, shimsPath, buildInfo, buildCacheFile, hit, compiledFiles, relativeCompiledFiles, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    manifestPkgBundles = [];
                    i = 0;
                    _c.label = 1;
                case 1:
                    if (!(i < manifestDirs.length)) return [3 /*break*/, 12];
                    dir = manifestDirs[i];
                    pkg = dir.pkg;
                    manifestPkgInfo = (0, utils_1.getManifestPkgInfo)(pkg);
                    _a = getAllPaths(manifestPkgInfo), cacheDir = _a.cacheDir, cacheSrcDir = _a.cacheSrcDir, firstBuild = _a.firstBuild, finalBuild = _a.finalBuild, entryPoint = _a.entryPoint, manifestJsPath = _a.manifestJsPath, shimsPath = _a.shimsPath;
                    if (!fs_1.default.existsSync(cacheDir)) {
                        fs_1.default.mkdirSync(cacheDir, { recursive: true });
                    }
                    return [4 /*yield*/, (0, utils_1.extractManifestPkgBuildInfo)(manifestPkgInfo)];
                case 2:
                    buildInfo = _c.sent();
                    buildCacheFile = path_1.default.resolve(cacheDir, "cache.json");
                    return [4 /*yield*/, checkCache({
                            buildCacheFile: buildCacheFile,
                            finalBundleFile: path_1.default.resolve(finalBuild, "bundle.js"),
                            pkg: pkg,
                            manifestDir: buildInfo.dir,
                        })];
                case 3:
                    hit = _c.sent();
                    // NOTE: freeze flag has to be changed manually in the cache.json file in a hit case
                    if (hit) {
                        manifestPkgBundles.push({
                            src: fs_1.default.readFileSync(path_1.default.resolve(finalBuild, "bundle.js")).toString(),
                            scriptName: scriptName,
                            pkg: pkg,
                        });
                        return [3 /*break*/, 11];
                    }
                    (0, utils_1.copyManifestEntryTemplate)("react", cacheSrcDir);
                    return [4 /*yield*/, (0, utils_1.compileTypescriptManifestPkg)(buildInfo.dir, firstBuild)];
                case 4:
                    compiledFiles = _c.sent();
                    relativeCompiledFiles = compiledFiles.map(function (file) {
                        return path_1.default
                            .relative((0, utils_1.getToolPkgInfo)()["nodeModule"], file)
                            .replace(/\\/g, "/");
                    });
                    _c.label = 5;
                case 5:
                    _c.trys.push([5, 7, , 8]);
                    return [4 /*yield*/, validateTSOutput(compiledFiles)];
                case 6:
                    _c.sent();
                    return [3 /*break*/, 8];
                case 7:
                    _b = _c.sent();
                    // TODO: exit properly
                    throw Error("Some typscript compiled output files are missing after 600ms.");
                case 8: return [4 /*yield*/, (0, utils_1.installManifestPkgDependencies)(manifestPkgInfo, pkgManager)];
                case 9:
                    _c.sent();
                    // TODO: if no tsconfig.js file, then do a babel build
                    // use the built assets from previous step, to create a webpack build
                    return [4 /*yield*/, (0, utils_1.bundleManifestPkg)("development", true, entryPoint, { path: finalBuild, filename: "bundle.js" }, scriptName, "http://localhost:".concat(port, "/assets?pkg=").concat(encodeURI(pkg), "&file="), manifestJsPath, relativeCompiledFiles, path_1.default
                            .relative((0, utils_1.getToolPkgInfo)()["nodeModule"], shimsPath)
                            .replace(/\\/g, "/"), 
                        // ignore putting import {Shims} from "path/to/shims.js"
                        // in all files from cache src dir
                        cacheSrcDir)];
                case 10:
                    // TODO: if no tsconfig.js file, then do a babel build
                    // use the built assets from previous step, to create a webpack build
                    _c.sent();
                    manifestPkgBundles.push({
                        src: fs_1.default.readFileSync(path_1.default.resolve(finalBuild, "bundle.js")).toString(),
                        scriptName: scriptName,
                        pkg: pkg,
                    });
                    // update cache
                    updateBuildCache(buildCacheFile, buildInfo.dir, pkg, freeze);
                    _c.label = 11;
                case 11:
                    i++;
                    return [3 /*break*/, 1];
                case 12: return [2 /*return*/, manifestPkgBundles];
            }
        });
    });
}
exports.buildManifestPackage = buildManifestPackage;
//# sourceMappingURL=build-manifest-package.js.map