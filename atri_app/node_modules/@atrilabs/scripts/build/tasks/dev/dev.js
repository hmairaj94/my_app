#!/usr/bin/env node
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var webpack_1 = require("webpack");
var webpack_dev_server_1 = __importDefault(require("webpack-dev-server"));
var chalk_1 = __importDefault(require("chalk"));
var utils_1 = require("../../shared/utils");
var webpack_config_1 = __importDefault(require("../../shared/webpack.config"));
var terminal_1 = require("../../shared/terminal");
var addCompilerHooks_1 = __importDefault(require("./addCompilerHooks"));
var forceRecompile_1 = __importDefault(require("./forceRecompile"));
var processToolConfig_1 = require("./processToolConfig");
var getServerConfig_1 = __importDefault(require("./getServerConfig"));
var watchCorePkg_1 = __importDefault(require("./watchCorePkg"));
var buildLayer_1 = __importDefault(require("./buildLayer"));
var buildRuntime_1 = __importDefault(require("./buildRuntime"));
var toolPkgInfo = (0, utils_1.getToolPkgInfo)();
var corePkgInfo = (0, utils_1.getCorePkgInfo)();
var toolEnv = (0, utils_1.getToolEnv)();
var serverConfig = (0, getServerConfig_1.default)();
// watch @atrilabs/core package if it's not inside node_modules
(0, watchCorePkg_1.default)(corePkgInfo);
(0, processToolConfig_1.processToolConfig)(toolPkgInfo)
    .then(function (_a) {
    var toolConfig = _a.toolConfig, layerEntries = _a.layerEntries, runtimeEntries = _a.runtimeEntries, manifestSchemaEntries = _a.manifestSchemaEntries;
    return __awaiter(void 0, void 0, void 0, function () {
        var webpackConfig, compiler, devServer;
        var _b;
        return __generator(this, function (_c) {
            // force compile when tool.config.js file changes
            (0, forceRecompile_1.default)(corePkgInfo, toolPkgInfo);
            // build all layers once in the beginning
            // TODO: handle failed compilation.
            // failed compilation should lead to watching for changes so that
            // when error gets fixed, compilation resumes.
            layerEntries.forEach(function (layerEntry) { return (0, buildLayer_1.default)(layerEntry); });
            // build all runtimes once in the beginning
            // TODO: handle failed compilation.
            runtimeEntries.forEach(function (runtimeEntry) { return (0, buildRuntime_1.default)(runtimeEntry); });
            webpackConfig = (0, webpack_config_1.default)(corePkgInfo, toolPkgInfo, toolConfig, layerEntries, runtimeEntries, manifestSchemaEntries, toolEnv, "development", true);
            webpackConfig["watchOptions"] = {
                ignored: /node_modules/,
            };
            webpackConfig["mode"] = "development";
            webpackConfig["devServer"] = {
                client: {
                    overlay: true,
                },
                hot: true,
                proxy: (_b = {},
                    _b[toolConfig.assetManager.urlPath] = {
                        target: toolConfig.devServerProxy.hostname,
                    },
                    _b["/api"] = {
                        target: toolConfig.devServerProxy.hostname,
                    },
                    _b),
            };
            compiler = (0, webpack_1.webpack)(webpackConfig);
            (0, addCompilerHooks_1.default)(compiler);
            devServer = new webpack_dev_server_1.default(__assign(__assign({}, serverConfig), webpackConfig["devServer"]), compiler);
            // launch WebpackDevServer
            devServer.startCallback(function () {
                if (terminal_1.isInteractive) {
                    // clearConsole();
                }
                console.log(chalk_1.default.cyan("Starting the development server...\n"));
            });
            // wait for kill signals
            ["SIGINT", "SIGTERM"].forEach(function (sig) {
                process.on(sig, function () {
                    devServer.close();
                    process.exit();
                });
            });
            // wait for input on stdin (hold the terminal)
            process.stdin.on("end", function () {
                devServer.close();
                process.exit();
            });
            return [2 /*return*/];
        });
    });
})
    .catch(function (err) {
    console.log(err);
});
//# sourceMappingURL=dev.js.map