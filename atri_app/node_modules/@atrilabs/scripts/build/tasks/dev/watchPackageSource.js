"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.watchRuntimeSource = exports.watchLayerSource = void 0;
var chokidar_1 = __importDefault(require("chokidar"));
var buildLayer_1 = __importDefault(require("./buildLayer"));
var buildRuntime_1 = __importDefault(require("./buildRuntime"));
var watcher = chokidar_1.default.watch([]);
var watchedLayerSrcDirs = {};
var watchedRuntimeSrcDirs = {};
watcher.on("change", function (path) {
    var changeWasInLayer = false;
    var layerSrcDirs = Object.keys(watchedLayerSrcDirs);
    layerSrcDirs.forEach(function (srcDir) {
        if (path.includes(srcDir)) {
            changeWasInLayer = true;
            (0, buildLayer_1.default)(watchedLayerSrcDirs[srcDir]);
        }
    });
    // check if the changes were in a runtime package
    if (!changeWasInLayer) {
        var runtimeSrcDirs = Object.keys(watchedRuntimeSrcDirs);
        runtimeSrcDirs.forEach(function (srcDir) {
            if (path.includes(srcDir)) {
                (0, buildRuntime_1.default)(watchedRuntimeSrcDirs[srcDir]);
            }
        });
    }
});
/**
 * Watch src directory of layers not inside node_modules. It does nothing if the
 * src directory is already under watch.
 */
function watchLayerSource(layerEntries) {
    for (var i = 0; i < layerEntries.length; i++) {
        var layerEntry = layerEntries[i];
        var srcDir = layerEntry.layerSrcDir;
        if (watchedLayerSrcDirs[srcDir] === undefined &&
            srcDir.match(/node_modules/) === null) {
            watcher.add("".concat(srcDir, "/**/*"));
            watchedLayerSrcDirs[srcDir] = layerEntry;
        }
    }
}
exports.watchLayerSource = watchLayerSource;
/**
 * Watch src directory of runtimes not inside node_modules. It does nothing if the
 * src directory is already under watch.
 */
function watchRuntimeSource(runtimeEntries) {
    for (var i = 0; i < runtimeEntries.length; i++) {
        var runtimeEntry = runtimeEntries[i];
        var srcDir = runtimeEntry.runtimeSrcDir;
        if (watchedRuntimeSrcDirs[srcDir] === undefined &&
            srcDir.match(/node_modules/) === null) {
            watcher.add("".concat(srcDir, "/**/*"));
            watchedRuntimeSrcDirs[srcDir] = runtimeEntry;
        }
    }
}
exports.watchRuntimeSource = watchRuntimeSource;
//# sourceMappingURL=watchPackageSource.js.map