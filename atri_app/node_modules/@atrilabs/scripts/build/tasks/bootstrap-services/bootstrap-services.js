#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var child_process_1 = require("child_process");
var path_1 = __importDefault(require("path"));
function startEventServer() {
    var runEventServerFile = path_1.default.resolve(__dirname, "runEventServer.js");
    var controller = new AbortController();
    var signal = controller.signal;
    var eventServer = (0, child_process_1.fork)(runEventServerFile, [], { signal: signal });
    eventServer.on("error", function (err) {
        if (!err.toString().includes("AbortError"))
            console.log("Event Server exited with error\n".concat(err));
    });
    return controller;
}
function startFileServer() {
    var fileServerFile = path_1.default.resolve(__dirname, "runFileServer.js");
    var controller = new AbortController();
    var signal = controller.signal;
    var fileServer = (0, child_process_1.fork)(fileServerFile, [], { signal: signal });
    fileServer.on("error", function (err) {
        if (!err.toString().includes("AbortError"))
            console.log("File Server exited with error\n".concat(err));
    });
    return controller;
}
function startManifestServer() {
    var manifestServerFile = path_1.default.resolve(__dirname, "runManifestServer.js");
    var controller = new AbortController();
    var signal = controller.signal;
    var manifestServer = (0, child_process_1.fork)(manifestServerFile, [], { signal: signal });
    manifestServer.on("error", function (err) {
        if (!err.toString().includes("AbortError"))
            console.log("Manifest Server exited with error\n".concat(err));
    });
    return controller;
}
function startPublishServer() {
    var runPublishServerFile = path_1.default.resolve(__dirname, "runPublishServer.js");
    var controller = new AbortController();
    var signal = controller.signal;
    var publishServer = (0, child_process_1.fork)(runPublishServerFile, [], { signal: signal });
    publishServer.on("error", function (err) {
        if (!err.toString().includes("AbortError"))
            console.log("Publish Server exited with error\n".concat(err));
    });
    return controller;
}
function startIpcServer() {
    var runIpcServerFile = path_1.default.resolve(__dirname, "runIpcServer.js");
    var controller = new AbortController();
    var signal = controller.signal;
    var ipcServer = (0, child_process_1.fork)(runIpcServerFile, [], { signal: signal });
    ipcServer.on("error", function (err) {
        if (!err.toString().includes("AbortError"))
            console.log("IPC Server exited with error\n".concat(err));
    });
    return controller;
}
var controllers = [
    startEventServer(),
    startFileServer(),
    startManifestServer(),
    startPublishServer(),
    startIpcServer(),
];
// wait for kill signals
["SIGINT", "SIGTERM"].forEach(function (sig) {
    process.on(sig, function () {
        controllers.forEach(function (controller) {
            controller.abort();
        });
        process.exit();
    });
});
// wait for input on stdin (hold the terminal)
process.stdin.on("end", function () {
    controllers.forEach(function (controller) {
        controller.abort();
    });
    process.exit();
});
//# sourceMappingURL=bootstrap-services.js.map