"use strict";
var InternalVisitor = {
    VariableDeclarator: function (path) {
        var id = path.get("id");
        if (id.type === "Identifier" && id.node.name === "menuRegistry") {
            var items = this.options.menu.map(function (name) {
                return "".concat(name, ": {items: []},");
            });
            var init = path.get("init");
            init.replaceWithSourceString("{".concat(items.join("\n"), "}"));
        }
        if (id.type === "Identifier" && id.node.name === "containerRegistry") {
            var items = this.options.containers.map(function (name) {
                return "".concat(name, ": {items: []},");
            });
            var init = path.get("init");
            init.replaceWithSourceString("{".concat(items.join("\n"), "}"));
        }
        if (id.type === "Identifier" && id.node.name === "tabsRegistry") {
            var items = this.options.tabs.map(function (name) {
                return "".concat(name, ": {items: []},");
            });
            var init = path.get("init");
            init.replaceWithSourceString("{".concat(items.join("\n"), "}"));
        }
    },
};
/**
 *
 * @param {*} babel
 * @param {{menu?: string[], containers?: string[], tabs?: string[], layerDetailsFile: string}} options
 */
module.exports = function (babel, options) {
    return {
        visitor: {
            Program: {
                enter: function (path, parent) {
                    var skip = !(parent.filename.includes(options.layerDetailsFile));
                    if (!skip) {
                        path.traverse(InternalVisitor, { options: options });
                    }
                },
            },
        },
    };
};
//# sourceMappingURL=add-meta-to-core.js.map