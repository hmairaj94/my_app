"use strict";
/**
 * The path to layer can be without extension.
 * @param {*} babel
 * @param {{layers: {path: string}[], coreEntry: string}} options
 * @returns
 */
module.exports = function (babel, options) {
    return {
        visitor: {
            Program: function (path, parent) {
                if (!(parent.filename.includes(options.coreEntry))) {
                    return;
                }
                if (options && options.layers && Array.isArray(options.layers)) {
                    var oldCode = parent.file.code + "\n";
                    var importStrings = options.layers
                        .map(function (layer, index) {
                        return "import layer".concat(index, " from \"").concat(layer.path, "\";\n");
                    })
                        .join("");
                    var callLayers = options.layers
                        .map(function (_, index) {
                        return "layer".concat(index, "()\n");
                    })
                        .join("");
                    var newCode = oldCode + importStrings + callLayers;
                    path.replaceWith(babel.parse(newCode).program);
                    path.skip();
                }
            },
        },
    };
};
//# sourceMappingURL=add-layer-import-to-core.js.map