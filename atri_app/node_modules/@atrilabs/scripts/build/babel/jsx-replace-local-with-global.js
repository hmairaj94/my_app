"use strict";
var AttributeVisitor = {
    JSXAttribute: function (path, options) {
        var getNameMap = options.getNameMap;
        var filename = options.filename;
        var map = getNameMap(filename);
        // check if name attribute exists
        if (path.get("name").node.name === "name") {
            // the name attribute must have a string literal value
            if (options.types.isStringLiteral(path.get("value"))) {
                var strValue = path.get("value").node.value;
                // key can menu, container, tab
                var key = options.compName.toLowerCase();
                if (map[key] && map[key][strValue]) {
                    path.get("value").replaceWithSourceString("\"".concat(map[key][strValue], "\""));
                }
            }
            if (options.types.isJSXExpressionContainer(path.get("value"))) {
                var expr = path.get("value").get("expression");
                if (options.types.isStringLiteral(expr)) {
                    var strValue = expr.node.value;
                    // key can menu, container, tab
                    var key = options.compName.toLowerCase();
                    if (map[key] && map[key][strValue]) {
                        expr.replaceWithSourceString("\"".concat(map[key][strValue], "\""));
                    }
                }
            }
        }
    },
};
var JSXElementVisitor = {
    JSXElement: function (path, options) {
        // Menu, Container, Tab
        var compName = path.get("openingElement").get("name").node.name;
        if (compName === options.localname) {
            var curr = path.scope;
            while (curr) {
                if (!curr.hasOwnBinding(options.localname)) {
                    curr = curr.parent;
                }
                else {
                    if (curr === curr.getProgramParent()) {
                        // found a refernce in JSX
                        path.traverse(AttributeVisitor, {
                            getNameMap: options.getNameMap,
                            filename: options.filename,
                            types: options.types,
                            compName: options.compName,
                        });
                    }
                    break;
                }
            }
        }
    },
};
var ImportSpecifierVisitor = {
    ImportSpecifier: function (path, options) {
        if (path.parentPath.get("source").node.value === "@atrilabs/core" &&
            path.get("imported").node.name === "Menu") {
            // path.traverse with local name
            path.getStatementParent().parentPath.traverse(JSXElementVisitor, {
                getNameMap: options.getNameMap,
                filename: options.filename,
                types: options.types,
                compName: "menu",
                localname: path.get("local").node.name,
            });
        }
        if (path.parentPath.get("source").node.value === "@atrilabs/core" &&
            path.get("imported").node.name === "Tab") {
            // path.traverse with local name
            path.getStatementParent().parentPath.traverse(JSXElementVisitor, {
                getNameMap: options.getNameMap,
                filename: options.filename,
                types: options.types,
                compName: "tabs",
                localname: path.get("local").node.name,
            });
        }
        if (path.parentPath.get("source").node.value === "@atrilabs/core" &&
            path.get("imported").node.name === "Container") {
            // path.traverse with local name
            path.getStatementParent().parentPath.traverse(JSXElementVisitor, {
                getNameMap: options.getNameMap,
                filename: options.filename,
                types: options.types,
                compName: "containers",
                localname: path.get("local").node.name,
            });
        }
    },
};
/**
 *
 * @param {*} babel
 * @param {{getNameMap: (filename: string)=>{menu?: {[localname: string]: string},containers?: {[localname: string]: string},tabs?: {[localname: string]: string}}|undefined}} options
 * @returns
 */
module.exports = function (babel, options) {
    return {
        visitor: {
            Program: {
                enter: function (path, parent) {
                    var filename = parent.filename;
                    path.traverse(ImportSpecifierVisitor, {
                        getNameMap: options.getNameMap,
                        filename: filename,
                        types: babel.types,
                    });
                },
            },
        },
    };
};
//# sourceMappingURL=jsx-replace-local-with-global.js.map