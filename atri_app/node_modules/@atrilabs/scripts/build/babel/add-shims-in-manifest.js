"use strict";
/**
 *
 * @param {babel.NodePath.Specifiers} specifiers
 * @param {babel.types} types
 * @returns {{imported: string | undefined, local: string}[]}
 */
function generateImportList(specifiers, types) {
    var importList = [];
    for (var i = 0; i < specifiers.length; i++) {
        var spec = specifiers[i];
        if (types.isImportDefaultSpecifier(spec)) {
            importList.push({ local: spec.get("local").node.name });
        }
        else {
            importList.push({
                local: spec.get("local").node.name,
                imported: spec.get("imported").node.name,
            });
        }
    }
    return importList;
}
/**
 *
 * @param {"Shim.React" | "Shim.ReactRuntime"} shimPrefix
 * @param {{imported: string | undefined, local: string}[]} importList
 * @returns
 */
function replaceWithShim(shimPrefix, importList) {
    var strs = [];
    for (var i = 0; i < importList.length; i++) {
        var imported = importList[i].imported;
        var local = importList[i].local;
        var str = "const ".concat(local, " = ").concat(shimPrefix);
        if (imported)
            str = "".concat(str, ".").concat(imported, ";");
        else
            str = "".concat(str, ";");
        strs.push(str);
    }
    return strs;
}
/**
 * This plugin converts the following:
 * Source - import {useState} from "react";
 * Output - import {Shim} from "./shims";
 *          const useState = Shim.React.useState;
 *
 * Source - import {jsx as _jsx} from "react/jsx-runtime";
 * Output - import {Shim} from "./shims";
 *          const _jsx = Shim.ReactRuntime.jsx;
 * @param {babel} babel
 * @param {{shimsPath: string, ignoreShimsDir: string}} options
 * @returns
 */
module.exports = function (babel, options) {
    var shimsImportStatement = "import { Shims } from \"".concat(options.shimsPath, "\";");
    var childVisitor = {
        ImportDeclaration: function (path) {
            if (path.get("source").node.value === "react") {
                var specifiers = path.get("specifiers");
                var importList = generateImportList(specifiers, babel.types);
                // add new nodes
                replaceWithShim("Shims.React", importList).forEach(function (curr) {
                    var newNode = babel.template.statement.ast(curr);
                    path.insertAfter(newNode);
                });
                // remove import ... "react";
                path.remove();
            }
            else if (path.get("source").node.value === "react/jsx-runtime") {
                var specifiers = path.get("specifiers");
                var importList = generateImportList(specifiers, babel.types);
                // add new nodes
                replaceWithShim("Shims.ReactRuntime", importList).forEach(function (curr) {
                    var newNode = babel.template.statement.ast(curr);
                    path.insertAfter(newNode);
                });
                // remove import ... "react/runtime";
                path.remove();
            }
        },
    };
    return {
        visitor: {
            Program: function (path, parent) {
                if (!(parent.filename.includes(options.ignoreShimsDir))) {
                    var ast = babel.template.statement.ast(shimsImportStatement);
                    path.unshiftContainer("body", ast);
                    path.traverse(childVisitor);
                }
            },
        },
    };
};
//# sourceMappingURL=add-shims-in-manifest.js.map