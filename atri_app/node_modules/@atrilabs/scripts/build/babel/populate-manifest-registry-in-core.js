"use strict";
module.exports = function (babel, options) {
    // const options = {
    //   manifestRegistryFile: "",
    //   manifests: [
    //     { manifestId: "man1", schemaSrc: "importsrc1" },
    //     { manifestId: "man2", schemaSrc: "importsrc2" }
    //   ]
    // };
    function importTemplate(schemaModulePath, index) {
        // import manSchema1 from "importsrc1";
        return "import manSchema".concat(index, " from \"").concat(schemaModulePath, "\";");
    }
    function initTemplate(manifestIds) {
        // {"man1": {components: [], schema: manSchema1}}
        var fields = manifestIds
            .map(function (manifestId, index) {
            return "\"".concat(manifestId, "\": {components: [], schema: manSchema").concat(index, "()}");
        })
            .join(", ");
        var wrapped = "{".concat(fields, "}");
        return wrapped;
    }
    var childVisitor = {
        VariableDeclarator: function (path) {
            if (path.get("id").node.name === "manifestRegistry") {
                var init = path.get("init");
                var newInit = babel.template.expression.ast(initTemplate(options.manifests.map(function (man) { return man.manifestId; })));
                init.replaceWith(newInit);
            }
        },
    };
    return {
        visitor: {
            Program: function (path, parent) {
                if (parent.filename.includes(options.manifestRegistryFile)) {
                    options.manifests.forEach(function (man, index) {
                        var importNode = babel.template.statement.ast(importTemplate(man.schemaModulePath, index));
                        path.unshiftContainer("body", importNode);
                        path.traverse(childVisitor);
                    });
                }
            },
        },
    };
};
//# sourceMappingURL=populate-manifest-registry-in-core.js.map