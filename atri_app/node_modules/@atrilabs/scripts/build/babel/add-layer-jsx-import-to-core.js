"use strict";
var ts = require("typescript");
/**
 * The path to layer can be without extension.
 * @param {*} babel
 * @param {{layers: {path: string, runtime?: string}[], coreEntry: string, runtimes: string[]}} options
 * @returns
 */
module.exports = function (babel, options) {
    return {
        visitor: {
            Program: function (path, parent) {
                if (!(parent.filename.includes(options.coreEntry))) {
                    return;
                }
                if (options &&
                    options.layers &&
                    Array.isArray(options.layers) &&
                    options.runtimes &&
                    Array.isArray(options.runtimes)) {
                    // collect all runtime and layer information
                    // {[runtime: string]: {layers: {path: string, index: number}[], index: number}}
                    var runtimeLayerMap_1 = {};
                    // layers that are not contained in any runtime are called independent layers
                    // {path: string, index: number}[]
                    var independentLayers_1 = [];
                    options.runtimes.forEach(function (rt, index) {
                        runtimeLayerMap_1[rt] = { layers: [], index: index };
                    });
                    options.layers.forEach(function (la, index) {
                        if (la.runtime) {
                            if (runtimeLayerMap_1[la.runtime]) {
                                runtimeLayerMap_1[la.runtime].layers.push({
                                    path: la.path,
                                    index: index,
                                });
                            }
                        }
                        else {
                            independentLayers_1.push({ path: la.path, index: index });
                        }
                    });
                    // create code strings
                    var oldCode = parent.file.code + "\n";
                    var importRuntimeString = Object.keys(runtimeLayerMap_1).map(function (rt) {
                        var index = runtimeLayerMap_1[rt].index;
                        return "import Runtime".concat(index, " from \"").concat(rt, "\";\n");
                    });
                    var importLayerString = options.layers
                        .map(function (layer, index) {
                        return "import Layer".concat(index, " from \"").concat(layer.path, "\";\n");
                    })
                        .join("");
                    var callIndependentLayers = independentLayers_1
                        .map(function (la) {
                        var index = la.index;
                        return "<Layer".concat(index, " />\n");
                    })
                        .join("");
                    var callRuntimeAndLayers = Object.keys(runtimeLayerMap_1)
                        .map(function (rt) {
                        var index = runtimeLayerMap_1[rt].index;
                        var runtimeLayers = runtimeLayerMap_1[rt].layers;
                        var callRuntimeLayers = runtimeLayers
                            .map(function (la) {
                            var index = la.index;
                            return "<Layer".concat(index, " />\n");
                        })
                            .join("");
                        var callRuntime = "<Runtime".concat(index, ">").concat(callRuntimeLayers, "</Runtime").concat(index, ">\n");
                        return callRuntime;
                    })
                        .join("");
                    var renderString = "root.render(<div>".concat(callIndependentLayers).concat(callRuntimeAndLayers, "</div>)");
                    var newCode = oldCode + importRuntimeString + importLayerString + renderString;
                    var compiledCode = ts.transpileModule(newCode, {
                        compilerOptions: {
                            target: "es5",
                            lib: ["dom", "dom.iterable", "esnext"],
                            allowJs: true,
                            skipLibCheck: true,
                            esModuleInterop: true,
                            allowSyntheticDefaultImports: true,
                            strict: true,
                            forceConsistentCasingInFileNames: true,
                            noFallthroughCasesInSwitch: true,
                            module: "es6",
                            moduleResolution: "node",
                            resolveJsonModule: true,
                            isolatedModules: true,
                            jsx: "react-jsx",
                        },
                    }).outputText;
                    path.replaceWith(babel.parse(compiledCode).program);
                    path.skip();
                }
            },
        },
    };
};
//# sourceMappingURL=add-layer-jsx-import-to-core.js.map