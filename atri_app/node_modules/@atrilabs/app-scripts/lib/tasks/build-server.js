#!/usr/bin/env node
"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var utils_1 = require("../shared/utils");
// @ts-ignore
global.window = undefined;
var mode = (0, utils_1.getMode)();
(0, utils_1.setNodeAndBabelEnv)(mode);
// Where will I get manifest directories to include?
try {
    var buildInfo = JSON.parse(fs_1.default.readFileSync(utils_1.buildInfoFile).toString());
    if (buildInfo) {
        var serverEntry = buildInfo["serverEntry"];
        var serverSideEntry = buildInfo["serverSideEntry"];
        var serverSrc = buildInfo["serverSrc"];
        var serverOutput = buildInfo["serverOutput"];
        var appSrc = buildInfo["appSrc"];
        var manifestDirs = buildInfo["manifestDirs"];
        if (!(serverEntry &&
            typeof serverEntry === "string" &&
            serverOutput &&
            typeof serverOutput === "string" &&
            serverSrc &&
            typeof serverSrc === "string")) {
            throw Error("Wrong schema of ".concat(utils_1.buildInfoFilename, "."));
        }
        var manifestPkgs = manifestDirs.map(function (manifestDef) {
            if (manifestDef["pkg"]) {
                return path_1.default.dirname(require.resolve("".concat(manifestDef.pkg, "/package.json")));
            }
            else {
                throw Error("Wrong schema of ".concat(utils_1.buildInfoFilename, "."));
            }
        });
        var includes = __spreadArray(__spreadArray([], manifestPkgs, true), [appSrc, serverSrc], false);
        (0, utils_1.buildServer)({
            serverEntry: path_1.default.resolve(serverEntry),
            serverOutput: path_1.default.resolve(serverOutput),
            includes: includes.map(function (inc) { return path_1.default.resolve(inc); }),
            mode: mode,
            allowList: manifestDirs.map(function (dir) { return dir.pkg; }),
            addWatchOptions: false,
            serverSideEntry: path_1.default.resolve(serverSideEntry),
        });
    }
    else {
        console.log("Missing manifestDirs in ".concat(utils_1.buildInfoFilename));
    }
}
catch (err) {
    console.log("Error\n", err);
}
//# sourceMappingURL=build-server.js.map