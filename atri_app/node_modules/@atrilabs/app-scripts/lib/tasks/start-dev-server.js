#!/usr/bin/env node
"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var utils_1 = require("../shared/utils");
var http_1 = __importDefault(require("http"));
// @ts-ignore
global.window = undefined;
var mode = (0, utils_1.getMode)();
(0, utils_1.setNodeAndBabelEnv)(mode);
var buildStage = { app: "", server: "" };
function checkIfBothDone() {
    if (buildStage["app"] === "done" && buildStage["server"] === "done") {
        return true;
    }
    return false;
}
function sendReloadSignalToServer() {
    var serverInfo = JSON.parse(fs_1.default.readFileSync(utils_1.serverInfoFile).toString());
    var serverPort = serverInfo["port"];
    var request = http_1.default.request({
        method: "POST",
        host: "localhost",
        port: serverPort,
        path: "/reload-all-dev-sockets",
    });
    request.on("response", function (resp) {
        resp.on("error", function (err) {
            console.log("response has some error\n", err);
        });
    });
    request.on("error", function (err) {
        console.log("request failed with error\n", err);
    });
    request.end();
}
function resetBuildStages() {
    buildStage["app"] = "";
    buildStage["server"] = "";
}
try {
    var buildInfo = JSON.parse(fs_1.default.readFileSync(utils_1.buildInfoFile).toString());
    if (buildInfo) {
        var appEntry = buildInfo["appEntry"];
        var appHtml = buildInfo["appHtml"];
        var appOutput = buildInfo["appOutput"];
        var appSrc = buildInfo["appSrc"];
        var manifestDirs = buildInfo["manifestDirs"];
        if (!(appEntry &&
            typeof appEntry === "string" &&
            appHtml &&
            typeof appHtml === "string" &&
            appOutput &&
            typeof appOutput === "string" &&
            appSrc &&
            typeof appSrc === "string" &&
            manifestDirs &&
            Array.isArray(manifestDirs))) {
            throw Error("Wrong schema of ".concat(utils_1.buildInfoFilename, "."));
        }
        var manifestPkgs = manifestDirs.map(function (manifestDef) {
            if (manifestDef["pkg"]) {
                return path_1.default.dirname(require.resolve("".concat(manifestDef.pkg, "/package.json")));
            }
            else {
                throw Error("Wrong schema of ".concat(utils_1.buildInfoFilename, "."));
            }
        });
        var includes = __spreadArray(__spreadArray([], manifestPkgs, true), [appSrc], false);
        var buildAppCompiler = (0, utils_1.buildApp)({
            appEntry: path_1.default.resolve(appEntry),
            appHtml: path_1.default.resolve(appHtml),
            appOutput: path_1.default.resolve(appOutput),
            includes: includes.map(function (inc) { return path_1.default.resolve(inc); }),
            mode: mode,
            addWatchOptions: true,
            wsClientEntry: path_1.default.resolve(__dirname, "..", "shared", "wsclient"),
            assetUrlPrefix: process.env["ASSET_URL_PREFIX"] || buildInfo.assetUrlPrefix,
        });
        var serverEntry = buildInfo["serverEntry"];
        var serverSideEntry = buildInfo["serverSideEntry"];
        var serverSrc = buildInfo["serverSrc"];
        var serverOutput = buildInfo["serverOutput"];
        if (!(serverEntry &&
            typeof serverEntry === "string" &&
            serverOutput &&
            typeof serverOutput === "string" &&
            serverSrc &&
            typeof serverSrc === "string" &&
            serverSideEntry &&
            typeof serverSideEntry === "string")) {
            throw Error("Wrong schema of ".concat(utils_1.buildInfoFilename, "."));
        }
        var serverIncludes = __spreadArray(__spreadArray([], manifestPkgs, true), [appSrc, serverSrc], false);
        var buildServerCompiler = (0, utils_1.buildServer)({
            serverEntry: path_1.default.resolve(serverEntry),
            serverOutput: path_1.default.resolve(serverOutput),
            includes: serverIncludes.map(function (inc) { return path_1.default.resolve(inc); }),
            mode: mode,
            allowList: manifestDirs.map(function (dir) { return dir.pkg; }),
            addWatchOptions: true,
            serverSideEntry: path_1.default.resolve(serverSideEntry),
        });
        buildAppCompiler.hooks.watchRun.tap("build-app-watch-run", function (_compiler) {
            console.log("build-app-watch-run called");
            buildStage["app"] = "pending";
        });
        buildAppCompiler.hooks.done.tap("build-app-done", function () {
            console.log("build-app-done called");
            buildStage["app"] = "done";
            if (checkIfBothDone()) {
                sendReloadSignalToServer();
                resetBuildStages();
            }
        });
        buildServerCompiler.hooks.watchRun.tap("build-server-watch-run", function (_compiler) {
            console.log("build-server-watch-run called");
            buildStage["server"] = "pending";
        });
        buildServerCompiler.hooks.done.tap("build-server-done", function () {
            console.log("build-server-done called");
            buildStage["server"] = "done";
            if (checkIfBothDone()) {
                sendReloadSignalToServer();
                resetBuildStages();
            }
        });
        // wait for kill signals
        ["SIGINT", "SIGTERM"].forEach(function (sig) {
            process.on(sig, function () {
                process.exit();
            });
        });
        // wait for input on stdin (hold the terminal)
        process.stdin.on("end", function () {
            process.exit();
        });
    }
    else {
        console.log("Missing manifestDirs in ".concat(utils_1.buildInfoFilename));
    }
}
catch (err) {
    console.log("Error\n", err);
}
//# sourceMappingURL=start-dev-server.js.map