"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_webpack_config_1 = require("./common.webpack.config");
var utils_1 = require("./utils");
function createServerWebpackConfig(options) {
    var shouldUseSourceMap = options.shouldUseSourceMap;
    var isEnvDevelopment = options.mode === "development";
    var isEnvProduction = options.mode === "production";
    var rules = [];
    var _a = (0, common_webpack_config_1.createCommonWebpackConfig)({
        isEnvDevelopment: isEnvDevelopment,
        isEnvProduction: isEnvProduction,
        imageInlineSizeLimit: utils_1.imageInlineSizeLimit,
        shouldUseSourceMap: shouldUseSourceMap,
    }), oneOf = _a.oneOf, plugins = _a.plugins;
    rules.push({
        oneOf: __spreadArray(__spreadArray([], oneOf, true), [
            {
                test: /\.(js|mjs|jsx|ts|tsx)$/,
                include: options.paths.includes,
                loader: require.resolve("babel-loader"),
                options: {
                    customize: require.resolve("babel-preset-react-app/webpack-overrides"),
                    presets: [
                        [
                            require.resolve("babel-preset-react-app"),
                            {
                                runtime: "automatic",
                            },
                        ],
                    ],
                    plugins: [
                        require.resolve("@atrilabs/scripts/build/babel/replace-import-with-id"),
                    ],
                    babelrc: false,
                    configFile: false,
                    sourceMaps: options.shouldUseSourceMap,
                    inputSourceMap: options.shouldUseSourceMap,
                },
            },
        ], false),
    });
    /**
     * The allow list must contain all the dependency of the manifest packages,
     * and their dependencies dependency and so on. This will entail reading package.json
     * of all dependencies recursively. Currently we are parking this approach, instead,
     * we are taking a short route by bundling our node module dependencies as well like express.
     */
    // const allowListFunc = (moduleName: string) => {
    //   for (let i = 0; i < options.allowList.length; i++) {
    //     const allowPkg = options.allowList[i]!;
    //     if (moduleName.includes(allowPkg)) {
    //       return true;
    //     }
    //   }
    //   return false;
    // };
    var webpackConfig = {
        mode: options.mode,
        entry: {
            app: { import: options.paths.serverEntry },
            serverSide: { import: options.paths.serverSideEntry },
        },
        target: "node",
        // externals: [nodeExternals({ allowlist: allowListFunc })],
        externalsPresets: { node: true },
        output: {
            path: options.paths.serverOutput,
            pathinfo: isEnvDevelopment,
            filename: isEnvProduction
                ? "static/js/[name].[contenthash:8].js"
                : isEnvDevelopment
                    ? "static/js/[name].bundle.js"
                    : undefined,
            chunkFilename: isEnvProduction
                ? "static/js/[name].[contenthash:8].chunk.js"
                : isEnvDevelopment
                    ? "static/js/[name].chunk.js"
                    : undefined,
            assetModuleFilename: "static/media/[name].[hash][ext]",
            library: {
                name: "getAppText",
                type: "commonjs",
            },
        },
        resolve: {
            extensions: utils_1.moduleFileExtensions.map(function (ext) { return ".".concat(ext); }),
        },
        module: {
            rules: rules,
        },
        plugins: __spreadArray([], plugins, true),
    };
    return webpackConfig;
}
exports.default = createServerWebpackConfig;
//# sourceMappingURL=server.webpack.config.js.map