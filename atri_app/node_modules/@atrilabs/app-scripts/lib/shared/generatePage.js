"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.copyAssets = exports.buildPages = exports.copyStaticDirectoryIfExists = exports.copyPublicDirectory = exports.generatePage = void 0;
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var fs_extra_1 = __importDefault(require("fs-extra"));
function generatePage(pageRoute, options) {
    if (options === null || options === void 0 ? void 0 : options.reload) {
        delete require.cache[options.paths.getAppText];
    }
    var getAppText = require(path_1.default.resolve(options.paths.getAppText))["getAppText"]["getAppText"];
    var appHtmlContent = fs_1.default.readFileSync(options.paths.appDistHtml).toString();
    var finalText = getAppText(pageRoute, appHtmlContent);
    return finalText;
}
exports.generatePage = generatePage;
function copyPublicDirectory(serverInfo, destDir) {
    if (!fs_1.default.existsSync(destDir)) {
        fs_1.default.mkdirSync(destDir, { recursive: true });
    }
    fs_extra_1.default.copySync(serverInfo.publicDir, destDir);
}
exports.copyPublicDirectory = copyPublicDirectory;
function copyStaticDirectoryIfExists(serverInfo, destDir) {
    if (!fs_1.default.existsSync(destDir)) {
        fs_1.default.mkdirSync(destDir, { recursive: true });
    }
    if (serverInfo.static !== undefined && !fs_1.default.existsSync(serverInfo.static)) {
        fs_extra_1.default.copySync(serverInfo.static, destDir);
    }
}
exports.copyStaticDirectoryIfExists = copyStaticDirectoryIfExists;
function buildPages(serverInfo, options) {
    var pageRoutes = Object.keys(serverInfo.pages);
    pageRoutes.forEach(function (pageRoute) {
        var finalText = generatePage(pageRoute, options);
        var dir = path_1.default.join(options.outputDir, pageRoute);
        if (!fs_1.default.existsSync(dir)) {
            fs_1.default.mkdirSync(dir, { recursive: true });
        }
        fs_1.default.writeFileSync(path_1.default.join(dir, "index.html"), finalText);
    });
}
exports.buildPages = buildPages;
function copyAssets(serverInfo, destDir) {
    var assetRoutes = Object.keys(serverInfo.publicUrlAssetMap);
    assetRoutes.forEach(function (assetRoute) {
        var srcDir = serverInfo.publicUrlAssetMap[assetRoute];
        fs_extra_1.default.copySync(srcDir, path_1.default.join(destDir, assetRoute));
    });
}
exports.copyAssets = copyAssets;
//# sourceMappingURL=generatePage.js.map