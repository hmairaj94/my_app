"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_webpack_config_1 = require("./common.webpack.config");
var utils_1 = require("./utils");
var HtmlWebpackPlugin = require("html-webpack-plugin");
function createWebpackConfig(options) {
    var shouldUseSourceMap = options.shouldUseSourceMap;
    var isEnvDevelopment = options.mode === "development";
    var isEnvProduction = options.mode === "production";
    var rules = [];
    if (options.shouldUseSourceMap) {
        rules.push({
            enforce: "pre",
            exclude: /node_modules/,
            test: /\.(js|mjs|jsx|ts|tsx|css)$/,
            loader: require.resolve("source-map-loader"),
        });
    }
    var _a = (0, common_webpack_config_1.createCommonWebpackConfig)({
        isEnvDevelopment: isEnvDevelopment,
        isEnvProduction: isEnvProduction,
        shouldUseSourceMap: shouldUseSourceMap,
        imageInlineSizeLimit: utils_1.imageInlineSizeLimit,
    }), oneOf = _a.oneOf, plugins = _a.plugins;
    rules.push({
        oneOf: __spreadArray(__spreadArray([], oneOf, true), [
            {
                test: /\.(js|mjs|jsx|ts|tsx)$/,
                include: options.paths.includes,
                loader: require.resolve("babel-loader"),
                options: {
                    customize: require.resolve("babel-preset-react-app/webpack-overrides"),
                    presets: [
                        [
                            require.resolve("babel-preset-react-app"),
                            {
                                runtime: "automatic",
                            },
                        ],
                    ],
                    plugins: [
                        require.resolve("@atrilabs/scripts/build/babel/replace-import-with-id"),
                    ],
                    babelrc: false,
                    configFile: false,
                    sourceMaps: shouldUseSourceMap,
                    inputSourceMap: shouldUseSourceMap,
                },
            },
        ], false),
    });
    var entries = {
        app: { import: options.paths.appEntry },
    };
    if (options.paths.wsClientEntry) {
        entries["wsclient"] = { import: options.paths.wsClientEntry };
    }
    var webpackConfig = {
        mode: options.mode,
        entry: entries,
        output: {
            path: options.paths.appOutput,
            pathinfo: isEnvDevelopment,
            filename: isEnvProduction
                ? "static/js/[name].[contenthash:8].js"
                : isEnvDevelopment
                    ? "static/js/[name].bundle.js"
                    : undefined,
            chunkFilename: isEnvProduction
                ? "static/js/[name].[contenthash:8].chunk.js"
                : isEnvDevelopment
                    ? "static/js/[name].chunk.js"
                    : undefined,
            assetModuleFilename: "static/media/[name].[hash][ext]",
            publicPath: options.publicUrlOrPath,
        },
        module: {
            rules: rules,
        },
        plugins: __spreadArray([
            new HtmlWebpackPlugin(Object.assign({}, {
                inject: true,
                template: options.paths.appHtml,
                publicPath: options.assetUrlPrefix || "auto",
            }, isEnvProduction
                ? {
                    minify: {
                        removeComments: true,
                        collapseWhitespace: true,
                        removeRedundantAttributes: true,
                        useShortDoctype: true,
                        removeEmptyAttributes: true,
                        removeStyleLinkTypeAttributes: true,
                        keepClosingSlash: true,
                        minifyJS: true,
                        minifyCSS: true,
                        minifyURLs: true,
                    },
                }
                : undefined))
        ], plugins, true),
        resolve: {
            extensions: utils_1.moduleFileExtensions.map(function (ext) { return ".".concat(ext); }),
        },
    };
    return webpackConfig;
}
exports.default = createWebpackConfig;
//# sourceMappingURL=webpack.config.js.map