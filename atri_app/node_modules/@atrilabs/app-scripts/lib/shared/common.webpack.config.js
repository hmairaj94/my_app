"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCommonWebpackConfig = void 0;
var getCSSModuleLocalIdent = require("react-dev-utils/getCSSModuleLocalIdent");
var MiniCssExtractPlugin = require("mini-css-extract-plugin");
var CompressionPlugin = require("compression-webpack-plugin");
var cssRegex = /\.css$/;
var cssModuleRegex = /\.module\.css$/;
var sassRegex = /\.(scss|sass)$/;
var sassModuleRegex = /\.module\.(scss|sass)$/;
function createCommonWebpackConfig(options) {
    var isEnvDevelopment = options.isEnvDevelopment, isEnvProduction = options.isEnvProduction, shouldUseSourceMap = options.shouldUseSourceMap, imageInlineSizeLimit = options.imageInlineSizeLimit;
    var getStyleLoaders = function (cssOptions, preProcessor) {
        var loaders = [
            {
                loader: MiniCssExtractPlugin.loader,
            },
            {
                loader: require.resolve("css-loader"),
                options: __assign(__assign({}, cssOptions), { 
                    // url below resolves https://github.com/webpack-contrib/mini-css-extract-plugin/issues/286#issuecomment-979389073
                    url: {
                        filter: function (url) {
                            if (url.startsWith("/app-assets")) {
                                return false;
                            }
                            return true;
                        },
                    } }),
            },
            {
                // Options for PostCSS as we reference these options twice
                // Adds vendor prefixing based on your specified browser support in
                // package.json
                loader: require.resolve("postcss-loader"),
                options: {
                    postcssOptions: {
                        // Necessary for external CSS imports to work
                        // https://github.com/facebook/create-react-app/issues/2677
                        ident: "postcss",
                        config: false,
                        plugins: [
                            "postcss-flexbugs-fixes",
                            [
                                "postcss-preset-env",
                                {
                                    autoprefixer: {
                                        flexbox: "no-2009",
                                    },
                                    stage: 3,
                                },
                            ],
                            // Adds PostCSS Normalize as the reset css with default options,
                            // so that it honors browserslist config in package.json
                            // which in turn let's users customize the target behavior as per their needs.
                            "postcss-normalize",
                        ],
                    },
                    sourceMap: isEnvProduction ? shouldUseSourceMap : isEnvDevelopment,
                },
            },
        ].filter(Boolean);
        if (preProcessor) {
            loaders.push({
                loader: require.resolve(preProcessor),
                options: {
                    sourceMap: true,
                },
            });
        }
        return loaders;
    };
    var oneOf = [
        {
            test: [/\.avif$/],
            type: "asset",
            mimetype: "image/avif",
            parser: {
                dataUrlCondition: {
                    maxSize: imageInlineSizeLimit,
                },
            },
        },
        {
            test: [/\.bmp$/, /\.gif$/, /\.jpe?g$/, /\.png$/],
            type: "asset",
            parser: {
                dataUrlCondition: {
                    maxSize: imageInlineSizeLimit,
                },
            },
        },
        {
            test: /\.svg$/,
            use: [
                {
                    loader: require.resolve("@svgr/webpack"),
                    options: {
                        prettier: false,
                        svgo: false,
                        svgoConfig: {
                            plugins: [{ removeViewBox: false }],
                        },
                        titleProp: true,
                        ref: true,
                    },
                },
                {
                    loader: require.resolve("file-loader"),
                    options: {
                        name: "static/media/[name].[hash].[ext]",
                    },
                },
            ],
            issuer: {
                and: [/\.(ts|tsx|js|jsx|md|mdx)$/],
            },
        },
        {
            test: cssRegex,
            exclude: cssModuleRegex,
            use: getStyleLoaders({
                importLoaders: 1,
                sourceMap: isEnvProduction ? shouldUseSourceMap : isEnvDevelopment,
                modules: {
                    mode: "icss",
                },
            }),
            // Don't consider CSS imports dead code even if the
            // containing package claims to have no side effects.
            // Remove this when webpack adds a warning or an error for this.
            // See https://github.com/webpack/webpack/issues/6571
            sideEffects: true,
        },
        // Adds support for CSS Modules (https://github.com/css-modules/css-modules)
        // using the extension .module.css
        {
            test: cssModuleRegex,
            use: getStyleLoaders({
                importLoaders: 1,
                sourceMap: isEnvProduction ? shouldUseSourceMap : isEnvDevelopment,
                modules: {
                    mode: "local",
                    getLocalIdent: getCSSModuleLocalIdent,
                },
            }),
        },
        // Opt-in support for SASS (using .scss or .sass extensions).
        // By default we support SASS Modules with the
        // extensions .module.scss or .module.sass
        {
            test: sassRegex,
            exclude: sassModuleRegex,
            use: getStyleLoaders({
                importLoaders: 3,
                sourceMap: isEnvProduction ? shouldUseSourceMap : isEnvDevelopment,
                modules: {
                    mode: "icss",
                },
            }, "sass-loader"),
            // Don't consider CSS imports dead code even if the
            // containing package claims to have no side effects.
            // Remove this when webpack adds a warning or an error for this.
            // See https://github.com/webpack/webpack/issues/6571
            sideEffects: true,
        },
        // Adds support for CSS Modules, but using SASS
        // using the extension .module.scss or .module.sass
        {
            test: sassModuleRegex,
            use: getStyleLoaders({
                importLoaders: 3,
                sourceMap: isEnvProduction ? shouldUseSourceMap : isEnvDevelopment,
                modules: {
                    mode: "local",
                    getLocalIdent: getCSSModuleLocalIdent,
                },
            }, "sass-loader"),
        },
    ];
    var plugins = [
        new MiniCssExtractPlugin({
            // Options similar to the same options in webpackOptions.output
            // both options are optional
            filename: "static/css/[name].[contenthash:8].css",
            chunkFilename: "static/css/[name].[contenthash:8].chunk.css",
        }),
        isEnvProduction && new CompressionPlugin(),
    ].filter(Boolean);
    return { oneOf: oneOf, plugins: plugins };
}
exports.createCommonWebpackConfig = createCommonWebpackConfig;
//# sourceMappingURL=common.webpack.config.js.map